\-------------------------------------------------------------------------
\ C2 Autoshaping Single Lever
\ Version: 1.2
\ Adapted from C1 Cue Conditioning (July 2017)
\ >('.')<
\ http://orcid.org/0000-0002-0972-3788
\-------------------------------------------------------------------------

\CONSTANTS
\SESSION CONTROL VARIABLES
^PreSessionDelay = 10        \Delay in seconds
^Trials = 25            \Number of trials. Supports values up to 30.
^MeanITI = 60            \Mean ITI value in s
^ITIvariance = 10        \Value to vary the ITI by (+/-)
^CSduration = 5        \CS duration in seconds
^USduration = 5           \Pump duration in seconds
^LeverOption = 1        \Set Lever Based on BOX = 0, Left Lever = 1, Right Lever = 2
^Paired = 1            \Whether US is paired with CS. 1 = Paired, 0 = Unpaired.
^AlertLongPE = 15        \Length of a 'Long PE' to alert the user to in seconds
^AlertShortPE = 20        \Length of a 'Short PE' to alert the user to in ms
^AlertIRI = 200            \Length of a 'Short Inter-Response Interval' to alert the user to in ms
^ComeBack = 5            \Number of minutes before the end of the session to come back
^Version = 120            \Version number. Will be divided by 100

\INPUTS
^LeftLever = 1
^RightLever = 2
^DisPortEntry = 3        \Discrete port entry. Will occur once per port entry/beam break
^ConPortEntry = 4        \Continuous port entry. Will occur every 10ms (system resolution
                \as long as the beam is broken).
\OUTPUTS
^LeftOut = 2
^OptoTrig = 1
^Leftlight = 4
^Rightlight = 5
^LightReceptacle = 6
^Houselight = 7
^Tone = 8


^Pump = 3

\Z-PULSES
^StartPreCS = 1
^StartCS = 2
^StartPostCS = 3
^StartUS = 4
^USComplete = 5
^ITItime = 6
^SessionBegin = 7
^ITIReady = 8
^MemMismatch = 9
^Shutdown = 10

\VARIABLES
\VARIABLES - DATA - Session Totals
DIM A = 30
\Delay Port Entries = A(0)
\Total Port Entries = A(1) [NB: Does not include 'delay']
\ITI Port Entries = A(2)
\PreCS Port Entries = A(3)
\CS Port Entries = A(4)
\Lever Presses = A(5)
\PostCS Port Entries = A(6)
\US Port Entries = A(7)
\Norm-CS = A(8) [Norm-CS is calculated as CS Port Entries - PreCS Port Entries]
\Delay PE Durations = A(9)
\Total PE Durations = A(10)
\ITI PE Durations = A(11)
\PreCS PE Durations = A(12)
\CS PE Durations = A(13)
\PostCS PE Durations = A(14)
\US PE Durations = A(15)
\Norm-CS Duration = A(16) [Norm-CS Duration is CS PE Duration - PreCS PE Duration]
\Trials With CS Lever Press = A(17)
\Probability CS Lever Press = A(18)
\Trials with CS Port Entry = A(19)
\Probability CS Port Entry = A(20)
\Sum CS Port Entry Latency = A(21)
\Sum CS Lever Press Latency = A(22)
\Response Bias = A(23) [(CS Lever Presses - CS Port Entries) / (CS Lever Presses + CS Port Entries)]
\Probability Difference = A(24)
\Latency Score = A(25)
\PCA Score = A(26)
\Long PE Alerts = A(27) [Number of PE Durations greater than 15 s]
\Short Durations Alerts = A(28) [Number of 5 point moving averages with PE Duration < 0.02 s]
\High Frequency Alerts = A(29) [5Hz intervals or 5 point moving averages with inter-response interval < 0.2 s]
var_alias Weight = A(30)

\VARIABLES - DATA - Trial Bins
DIM B = 10000    \ITI Port Entries,        subscript T
DIM C = 10000    \ITI Port Entry Durations,    subscript T
DIM D = 10000    \III Port Entry Latencies,    subscript T
DIM E = 10000    \PreCS Port Entries,        subscript T
DIM F = 10000    \PreCS Port Entry Durations,    subscript T
DIM G = 10000    \PreCS Port Entry Latencies,    subscript T
DIM H = 10000    \CS Port Entries,        subscript T
DIM I = 10000    \CS Port Entry Durations,    subscript T
DIM J = 10000    \CS Port Entry Latencies,    subscript T
DIM K = 10000    \Lever Presses,            subscript T
DIM L = 10000    \Lever Press Latencies,        subscript T
DIM M = 10000    \PostCS Port Entries,        subscript T
DIM N = 10000    \PostCS Port Entry Durations,    subscript T
DIM O = 10000    \PostCS Port Entry Latencies,    subscript T
DIM P = 10000    \US Port Entries,        subscript T
DIM Q = 10000    \US Port Entry Durations,    subscript T
DIM R = 10000    \US Port Entry Latencies,    subscript T

\VARIABLES - DATA - Timecourse Arrays
DIM S = 10000    \All Port Entry Timestamps,    subscript X(25)/Y
DIM U = 10000    \All Port Entry Durations,    subscript X(25)/Y
DIM V = 10000    \All Lever Presses,        subscript X(26)/Y

\VARIABLES - CONTROL - ITI LISTS
\Supports up to 30 trials. Will be generated algorithmically
LIST W = 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
21,22,23,24,25,26,27,28,29,30

\VARIABLES - CONTROL - WORKING VARIABLES
DIM X = 61
\X(0) = Session Clock (seconds)
\X(1) = Centisecond Clock
\X(2) = Trial Clock
\X(3) = Trial Component Clock
\X(4) = Period countdown clock
\X(5) = ITI selector
\X(6) = ITI number
\X(7) = ITI Halfway
\X(8) = SECSTODAY at Start
\X(9) = Expected End Time
\X(10) = Come Back Hours
\X(11) = Come Back Minutes
\X(12) = Z(1) memory
\X(13) = Z(2) memory
\X(14) = Z(3) memory
\X(15) = Z(4) memory
\X(16) = IRI1
\X(17) = IRI2
\X(18) = IRI3
\X(19) = IRI4
\X(20) = IRI5
\X(21) = ARITHMETICMEAN X(16) to X(20)
\X(22) = ARITHMETICMEAN Q(U-5) to Q(U-1)
\X(23) = Current PE Trial
\X(24) = T memory value
\X(25) = Subscript for R and S arrays
\X(26) = Subscript for the U array
\X(27) = Session State - 0 = delay, 1 = ITI, 2 = PreCS, 3 = CS, 4 = Unpaired US, 5 = Paired US, 6 = PostCS
\X(28) = Pump Operation Time
\X(29) = Temporary subscript value storage.
\X(30) - X(60) = Temporary List W holding and randomisation

\VARIABLES - CONTROL - SESSION PARAMETERS
DIM Z = 13
var_alias Session Length (s) = Z(0)
var_alias Pre Session Delay (s) = Z(1)
var_alias Number of Trials = Z(2)
var_alias Mean ITI Duration (s) = Z(3)
var_alias ITI varies by (s) = Z(4)
var_alias CS Duration (s) = Z(5)
var_alias US Duration (s) = Z(6)
var_alias Lever (1Left 2Right) = Z(7)
var_alias Pairing (0Unpaired 1Paired) = Z(8)
var_alias Long PE Definition (s) = Z(9)
var_alias Short PE Definition (s) = Z(10)
var_alias Short IRI Definition (s) = Z(11)
var_alias Come back x min before end = Z(12)
var_alias Version = Z(13)

DISKVARS = A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, U, V, W, Z
DISKOPTIONS = FULLHEADERS
DISKFORMAT = 16.3
DISKCOLUMNS = 1
Y2KCOMPLIANT

\-------------------------------------------------------------------------
\State Set 1 - Control Program

S.S.1,
S1,    \State 1 sets the default variables
    0.01": SET Z(1) = ^PreSessionDelay, Z(2) = ^Trials, Z(3) = ^MeanITI;
    SET Z(4) = ^ITIvariance, Z(5) = ^CSduration, Z(6) = ^USduration;
    SET Z(7) = ^LeverOption, Z(8) = ^Paired, Z(9) = ^AlertLongPE;
    SET Z(10) = ^AlertShortPE / 1000, Z(11) = ^AlertIRI / 1000, Z(12) = ^ComeBack;
    SET Z(13) = ^Version / 100;

    \Seal all the arrays
    SET B(Y+1) = -987.987, C(T+1) = -987.987, D(T+1) = -987.987;
    SET E(T+1) = -987.987, F(T+1) = -987.987, G(T+1) = -987.987;
    SET H(T+1) = -987.987, I(T+1) = -987.987, J(T+1) = -987.987;
    SET K(T+1) = -987.987, L(T+1) = -987.987, M(T+1) = -987.987;
    SET N(T+1) = -987.987, O(T+1) = -987.987, P(T+1) = -987.987;
    SET Q(T+1) = -987.987, R(T+1) = -987.987, S(0) = -987.987;
    SET U(0) = -987.987, V(0) = -987.987;

    SHOW 1, Initialising, Z(0); ZEROARRAY W;

    \Set the memory values
    SET X(12) = Z(1), X(13) = Z(2), X(14) = Z(3), X(15) = Z(4);

    \Set lever if ^LeverOption is not 1 or 2
    IF Z(7) = ^LeftLever [@LEFTOK, @CHECK]
        @LEFTOK: ---> S2
        @CHECK: IF Z(7) = ^RightLever [@RIGHTOK, @SET]
            @RIGHTOK: ---> S2
            @SET: SET Z(7) = BOX / 2, X(29) = Y, Y = Z(7);
            ~Y := Frac(Y);~;
            SET Z(7) = Y, Y = X(29);
            IF Z(7) < 0.1 [@EVEN, @ODD]
                @EVEN: SET Z(7) = ^RightLever ---> S2
                @ODD: SET Z(7) = ^LeftLever ---> S2

S2,    \State 2 will generate the ITIs
    0.01": IF Z(2) + 1 - Y >= 7 [@FULL, @ELIF]
        @FULL: SET W(Y) = Z(3) - 3*Z(4); ADD Y; SET W(Y) = Z(3) - 2*Z(4); ADD Y; SET W(Y) = Z(3) - Z(4); ADD Y; SET W(Y) = Z(3); ADD Y; SET W(Y) = Z(3) + Z(4); ADD Y; SET W(Y) = Z(3) + 2*Z(4); ADD Y; SET W(Y) = Z(3) + 3*Z(4); ADD Y ---> SX
        @ELIF: IF Z(2) + 1 - Y >= 6 [@PARTIAL, @ELIF]
            @PARTIAL: SET W(Y) = Z(3) - 3*Z(4); ADD Y; SET W(Y) = Z(3) - 2*Z(4); ADD Y; SET W(Y) = Z(3) - Z(4); ADD Y; SET W(Y) = Z(3) + Z(4); ADD Y; SET W(Y) = Z(3) + 2*Z(4); ADD Y; SET W(Y) = Z(3) + 3*Z(4); ADD Y;
            SET W(Y) = -987.987; SHOW 1, Selecting ITIs, Y; SET Y = 0 ---> S3
            @ELIF: IF Z(2) + 1 - Y >= 5 [@PARTIAL2, @ELIF]
                @PARTIAL2: SET W(Y) = Z(3) - 2*Z(4); ADD Y; SET W(Y) = Z(3) - Z(4); ADD Y; SET W(Y) = Z(3); ADD Y; SET W(Y) = Z(3) + Z(4); ADD Y; SET W(Y) = Z(3) + 2*Z(4); ADD Y;
                SET W(Y) = -987.987; SHOW 1, Selecting ITIs, Y; SET Y = 0 ---> S3
                @ELIF: IF Z(2) + 1 - Y >= 3 [@PARTIAL3, @ELIF]
                    @PARTIAL3: SET W(Y) = Z(3) - Z(4); ADD Y; SET W(Y) = Z(3); ADD Y; SET W(Y) = Z(3) + Z(4); ADD Y;
                    SET W(Y) = -987.987; SHOW 1, Selecting ITIs, Y; SET Y = 0 ---> S3
                    @ELIF: IF Z(2) + 1 - Y >= 2 [@PARTIAL4, @ELIF]
                        @PARTIAL3: SET W(Y) = Z(3) - Z(4); ADD Y; SET W(Y) = Z(3) + Z(4); ADD Y;
                        SET W(Y) = -987.987; SHOW 1, Selecting ITIs, Y; SET Y = 0 ---> S3
                        @ELIF: IF Z(2) + 1 - Y >= 1 [@SINGLE, @NONE]
                               @SINGLE: SET W(Y) = Z(3); ADD Y; SET W(Y) = -987.987;
                               SHOW 1, Selecting ITIs, Y; SET Y = 0 ---> S3
                               @NONE: SET W(Y) = -987.987; SHOW 1, Selecting ITIs, Y;
                               SET Y = 0 ---> S3

S3,    \State 3 will select the ITIs
    0.01": IF Y < Z(2) + 1 [@GENERATE, @COMPLETE]
        @GENERATE: RANDD X(5) = W; ADD X(61); IF X(5) > 0 [@ACCEPT, @REJECT]
            @ACCEPT: SET X(Y+30) = X(5); ADD Y ---> SX
            @REJECT: ---> SX
        @COMPLETE: SET X(Y+30) = -987.987; ZEROARRAY W; SET Y = 0 ---> S4

S4,    \State 4 will shift the ITIs back to the W array and calculate session length
    0.01": IF X(Y+30) = -987.987 [@SEAL, @TRANSFER]
        @SEAL: SET W(Y) = -987.987; SUMARRAY Z(0) = W, 0, Y-1;
        SET Z(0) = Z(0) + (Z(2) * 3 * Z(5));
        SET Y = 0; Z^ITIReady; SHOW 1, Session Length, Z(0) ---> S5
        @TRANSFER: SET W(Y) = X(Y+30); ADD Y ---> SX

S5,    \State 5 will empty the RANDD function
    0.01": IF X(61) < 31 [@RUN, @STOP]
        @RUN: RANDD X(5) = W; ADD X(61) ---> SX
        @STOP: ---> S6

S6,    \State 6 waits for the start command
    #START: SET X(0) = 0 - Z(1); SHOW 1, Session Time, X(0);
    SHOW 3, Time to Trial, W(Y); SHOW 4, Number of Trials, Z(2) ---> S7

    #Z^MemMismatch: SET X(12) = Z(1), X(13) = Z(2);
    SET X(14) = Z(3), X(15) = Z(4); ZEROARRAY W; SET X(61) = 0 ---> S2

S7,    \State 6 counts down the delay
    1": ADD X(0); SHOW 1, Session Time, X(0);
    IF X(0) >= 0 [@LIGHTSON, @WAIT]
        @LIGHTSON: Z^SessionBegin;
        SET STARTHOURS = CURRENTHOURS, STARTMINUTES = CURRENTMINUTES;
        SET STARTSECONDS = CURRENTSECONDS ---> S8
        @WAIT: ---> SX

S8,    \State 7 continues counting the clock during the session
    1": ADD X(0); SHOW 1, Session Time, X(0) ---> SX

    #Z^Shutdown: SET A(8) = A(4) - A(3), A(16) = A(13) - A(12);

    \Calculate probability difference
    SET A(18) = A(17) / Z(2), A(20) = A(19) / Z(2);
    SET A(24) = A(18) - A(20);

    \Calculate latency score
    SET A(25) = ((A(21) / Z(2)) - (A(22) / Z(2))) / Z(5);

    \Calculate response bias and PCA Score
    IF A(5) + A(4) > 0 [@CALCULATE, @NORESPONSE]
        @CALCULATE: SET A(23) = (A(5) - A(4)) / (A(5) + A(4));
        SET A(26) = (A(23) + A(24) + A(25)) / 3 ---> S9
        @NORESPONSE: SET A(23) = 0;
        SET A(26) = (A(23) + A(24) + A(25)) / 3 ---> S9

S9,    \State 9 waits for 1 second and closes the program
    1": ---> STOPABORTFLUSH

\-------------------------------------------------------------------------
\State Set 2 - Centisecond Clock

S.S.2,
S1,    \State 1 waits for the start command
    #START: SET X(1) = 0 - Z(1); SET D(T) = -1, G(T) = -1;
    SET J(T) = -1, L(T) = -1, O(T) = -1, R(T) = -1 ---> S2

S2,    \State 2 counts upwards in 10ms increments
    0.01": SET X(1) = X(1) + 0.01, X(2) = X(2) + 0.01 ---> SX
    #Z^StartPreCS: SET X(2) = 0 - Z(5), X(3) = 0 ---> S3

    #Z^Shutdown: ---> S4

S3,    \State 3 counts upwards in 10ms increments during a trial
    0.01": SET X(1) = X(1) + 0.01, X(2) = X(2) + 0.01, X(3) = X(3) + 0.01 ---> SX

    #Z^StartCS ! #Z^StartPostCS: SET X(3) = 0 ---> SX
    #Z^ITItime: SET X(2) = 0, X(3) = 0;
    ADD X(6); IF X(6) > Z(2) [@FINALITI, @NORMAL]
        @FINALITI: SUB X(6); SHOW 3, Trials Complete, X(6); ADD T;
        SET B(T) = 0, C(T) = 0, D(T) = X(4);
        SET B(T+1) = -987.987, C(T+1) = -987.987, D(T+1) = -987.987 ---> S2
        @NORMAL: SHOW 3, Trial Number, X(6); ADD T;
        SET B(T) = 0, C(T) = 0, D(T) = -1;
        SET E(T) = 0, F(T) = 0, G(T) = -1;
        SET H(T) = 0, I(T) = 0, J(T) = -1;
        SET K(T) = 0, L(T) = -1;
        SET M(T) = 0, N(T) = 0, O(T) = -1;
        SET P(T) = 0, Q(T) = 0, R(T) = -1;

        SET B(T+1) = -987.987, C(T+1) = -987.987, D(T+1) = -987.987;
        SET E(T+1) = -987.987, F(T+1) = -987.987, G(T+1) = -987.987;
        SET H(T+1) = -987.987, I(T+1) = -987.987, J(T+1) = -987.987;
        SET K(T+1) = -987.987, L(T+1) = -987.987;
        SET M(T+1) = -987.987, N(T+1) = -987.987, O(T+1) = -987.987;
        SET P(T+1) = -987.987, Q(T+1) = -987.987, R(T+1) = -987.987 ---> S2

    #Z^Shutdown: ---> S4

S4,    \State 4 is a holding state
    #START: ---> SX

\-------------------------------------------------------------------------
\State Set 3 - Trial Management

S.S.3,
S1,    \State 1 waits for the SessionBegin Z-Pulse
    #Z^SessionBegin: SET X(6) = 1, X(27) = 1, X(4) = W(0);
    SHOW 2, Time to Trial, X(4); SHOW 3, Trial Number, X(6);
    ON ^Houselight; IF Z(8) < 1 [@UNPAIRED, @PAIRED]
        @UNPAIRED: SET X(7) = X(4) / 2 ---> S2
        @PAIRED: ---> S2

S2,    \State 2 counts down until the next trial
    1": SUB X(4); SHOW 2, Time to Trial, X(4);
    IF X(4) <= 0 [@BEGINPRECS, @ELIF]
        @BEGINPRECS: Z^StartPreCS; SET X(4) = Z(5), X(27) = 2;
        SHOW 2, Pre-CS Time, X(4) ---> S3
        @ELIF: IF (X(4) = X(7)) AND (Z(8) < 1) [@UNPAIRED, @NULL]
            @UNPAIRED: Z^StartUS; ON ^Pump, ^LightReceptacle; SET X(27) = 4;
            SET X(10) = X(1) ---> SX
            @NULL: ---> SX

    #Z^USComplete: SET X(27) = 1 ---> SX


S3,    \State 3 turns on the laser
    1": ON ^OptoTrig ---> S4

S4,    \State 3 waits for the PreCS period to finish
    1": SUB X(4); SHOW 2, Pre-CS Time, X(4);
    IF X(4) <= 0 [@BEGINCS, @WAIT]
        @BEGINCS: Z^StartCS; SET X(4) = Z(5), X(27) = 3;
        SHOW 2, CS Time, X(4); IF Z(7) = ^Tone [@LEFT, @RIGHT]
            @LEFT: ON ^Tone ---> S5
            @RIGHT: ON ^Tone ---> S5
        @WAIT: ---> SX

S5,    \State 4 waits for the CS period to finish
    1": SUB X(4); SHOW 2, CS Time, X(4);
    IF X(4) <= 0 [@ENDCS, @WAIT]
        @ENDCS: Z^StartPostCS; SET X(4) = Z(5);
        SHOW 2, Post-CS Time, X(4); OFF ^Tone;
        IF Z(8) >=1 [@PAIRED, @UNPAIRED]
            @PAIRED: Z^StartUS; ON ^Pump, ^LightReceptacle; SET X(27) = 5 ---> S6
            @UNPAIRED: SET X(27) = 6  ---> S8
        @WAIT: ---> SX

S6,
    1.5": OFF ^Pump, ^OptoTrig ---> S7
S7,
    0.1": ON ^Pump ---> S8

S8,    \State 5 waits for the PostCS period to finish
    1": SUB X(4); SHOW 2, Post-CS Time, X(4);
    IF X(4) <= 0 [@ITI, @WAIT]
        @ITI: SET Y = X(6); SET X(4) = W(Y), X(27) = 1;
        SET X(7) = X(4) / 2;
        IF X(4) <= 0 [@WTF, @CHECK]
            @WTF: SHOW 2, No Further ITI!, X(4) ---> S10
            @CHECK: Z^ITItime; IF W(Y+1) <= 0 [@LASTITI, @CONTINUE]
                @LASTITI: SHOW 2, Final Interval, X(4); CLEAR 11, 11 ---> S9
                @CONTINUE: SHOW 2, Time to Trial, X(4) ---> S2
        @WAIT: ---> SX

    #Z^USComplete: SET X(27) = 6 ---> SX

S9,    \State 6 waits for the last ITI to finish
    1": SUB X(4); SHOW 2, Final Interval, X(4);
    IF X(4) <= 0 [@SHUTDOWN, @WAIT]
        @SHUTDOWN: Z^Shutdown; SHOW 2, Session Complete, X(4);
        OFF ^Houselight ---> S10
        @WAIT: ---> SX

S10,    \State 7 is a holding state
    #START: ---> SX

\-------------------------------------------------------------------------
\State Set 4 - Port Entry Recording

S.S.4,
S1,    \State 1 waits for the start command
    #START: SHOW 6, Total Port Entries, A(1);
    SHOW 7, ITI Port Entries, A(2);
    SHOW 8, Pre-CS Port Entries, A(3);
    SHOW 9, CS Port Entries, A(4);
    SHOW 10, Post-CS Port Entries, A(5) ---> S2

S2,    \State 2 counts port entries during the delay
    #R^DisPortEntry: ADD A(0); SET Y = X(25), S(Y) = X(1), U(Y) = 0;
    SET S(Y+1) = -987.987, U(Y+1) = -987.987;
    SHOW 20, Pre-Session Port Entries, A(0) ---> S4

    #Z^SessionBegin: ---> S4

S3,    \State 3 counts port entry duration during the delay
    #R^ConPortEntry: SET Y = X(25); SET A(9) = A(9) + 0.01, U(Y) = U(Y) + 0.01 ---> SX

    0.01": SET Y = X(25); IF U(Y) < 0.01 [@GIVENOMINAL, @ACCEPT]
        @GIVENOMINAL: SET U(Y) = 0.001, Z(8) = A(9) + 0.001; ADD X(25);
        IF X(27) < 3.5 [@LOWER, @UPPER]
            @LOWER: IF X(27) = 1 [@ONE, @CHECK]
                @ONE: ---> S4
                @CHECK: IF X(27) = 2 [@TWO, @CHECK]
                    @TWO: ---> S6
                    @CHECK: IF X(27) = 3 [@THREE, @ZERO]
                        @THREE: ---> S8
                        @ZERO: ---> S2
            @UPPER: IF X(27) = 4 [@FOUR, @CHECK]
                @FOUR: ---> S10
                @CHECK: IF X(27) = 5 [@FIVE, @SIX]
                    @FIVE: ---> S12
                    @SIX: ---> S14
        @ACCEPT: ADD X(25);
        IF X(27) < 3.5 [@LOWER, @UPPER]
            @LOWER: IF X(27) = 1 [@ONE, @CHECK]
                @ONE: ---> S4
                @CHECK: IF X(27) = 2 [@TWO, @CHECK]
                    @TWO: ---> S6
                    @CHECK: IF X(27) = 3 [@THREE, @ZERO]
                        @THREE: ---> S8
                        @ZERO: ---> S2
            @UPPER: IF X(27) = 4 [@FOUR, @CHECK]
                @FOUR: ---> S10
                @CHECK: IF X(27) = 5 [@FIVE, @SIX]
                    @FIVE: ---> S12
                    @SIX: ---> S14

S4,    \State 4 counts port entries during the ITI [X(27) = 1]
    #R^DisPortEntry: ADD A(1), A(2), B(T); SET Y = X(25), S(Y) = X(1), U(Y) = 0;
    SET S(Y+1) = -987.987, U(Y+1) = -987.987, X(23) = T;
    SHOW 6, Total Port Entries, A(1);
    SHOW 7, ITI Port Entries, A(2);
    IF D(T) < 0 [@LATENCY, @NULL]
        @LATENCY: SET D(T) = X(2) ---> S5
        @NULL: ---> S5

    #Z^StartPreCS: ---> S6
    #Z^StartUS: ---> S10
    #Z^Shutdown: ---> S16

S5,    \State 5 counts port entry duration during the ITI [X(27) = 1]
    #R^ConPortEntry: SET A(10) = A(10) + 0.01, A(11) = A(11) + 0.01;
    SET Y = X(25), U(Y) = U(Y) + 0.01 ---> SX

    0.01": SET Y = X(25); IF U(Y) < 0.01 [@GIVENOMINAL, @ACCEPT]
        @GIVENOMINAL: SET U(Y) = U(Y) + 0.001, A(10) = A(10) + 0.001;
        SET A(11) = A(11) + 0.001; ADD X(25);
        SET X(24) = T, T = X(23), C(T) = C(T) + 0.001, T = X(24);
        IF X(27) < 3.5 [@LOWER, @UPPER]
            @LOWER: IF X(27) = 1 [@ONE, @CHECK]
                @ONE: ---> S4
                @CHECK: IF X(27) = 2 [@TWO, @CHECK]
                    @TWO: ---> S6
                    @CHECK: IF X(27) = 3 [@THREE, @ZERO]
                        @THREE: ---> S8
                        @ZERO: ---> S2
            @UPPER: IF X(27) = 4 [@FOUR, @CHECK]
                @FOUR: ---> S10
                @CHECK: IF X(27) = 5 [@FIVE, @SIX]
                    @FIVE: ---> S12
                    @SIX: ---> S14
        @ACCEPT: SET X(24) = T, T = X(23), C(T) = C(T) + U(Y), T = X(24);
        ADD X(25);
        IF X(27) < 3.5 [@LOWER, @UPPER]
            @LOWER: IF X(27) = 1 [@ONE, @CHECK]
                @ONE: ---> S4
                @CHECK: IF X(27) = 2 [@TWO, @CHECK]
                    @TWO: ---> S6
                    @CHECK: IF X(27) = 3 [@THREE, @ZERO]
                        @THREE: ---> S8
                        @ZERO: ---> S2
            @UPPER: IF X(27) = 4 [@FOUR, @CHECK]
                @FOUR: ---> S10
                @CHECK: IF X(27) = 5 [@FIVE, @SIX]
                    @FIVE: ---> S12
                    @SIX: ---> S14

    #Z^Shutdown: SET Y = X(25); IF U(Y) < 0.01 [@GIVENOMINAL, @ACCEPT]
        @GIVENOMINAL: SET U(Y) = U(Y) + 0.001, A(10) = A(10) + 0.001;
        SET A(11) = A(11) + 0.001; ADD X(25);
        SET X(24) = T, T = X(23), C(T) = C(T) + 0.001, T = X(24) ---> S16
        @ACCEPT: SET X(24) = T, T = X(23), C(T) = C(T) + U(Y), T = X(24) ---> S16

S6,    \State 6 counts port entries during the Pre-CS Period [X(27) = 2]
    #R^DisPortEntry: ADD A(1), A(3), E(T); SET Y = X(25), S(Y) = X(1), U(Y) = 0;
    SET S(Y+1) = -987.987, U(Y+1) = -987.987, X(23) = T;
    SHOW 6, Total Port Entries, A(1);
    SHOW 8, Pre-CS Port Entries, A(3);
    IF G(T) < 0 [@LATENCY, @NULL]
        @LATENCY: SET G(T) = X(3) ---> S7
        @NULL: ---> S7

    #Z^StartCS: ---> S8
    #Z^Shutdown: ---> S16

S7,    \State 7 counts port entry duration during the Pre-CS Period [X(27) = 2]
    #R^ConPortEntry: SET A(10) = A(10) + 0.01, A(12) = A(12) + 0.01;
    SET Y = X(25), U(Y) = U(Y) + 0.01 ---> SX

    0.01": SET Y = X(25); IF U(Y) < 0.01 [@GIVENOMINAL, @ACCEPT]
        @GIVENOMINAL: SET U(Y) = U(Y) + 0.001, A(10) = A(10) + 0.001;
        SET A(12) = A(12) + 0.001; ADD X(25);
        SET X(24) = T, T = X(23), F(T) = F(T) + 0.001, T = X(24);
        IF X(27) < 3.5 [@LOWER, @UPPER]
            @LOWER: IF X(27) = 1 [@ONE, @CHECK]
                @ONE: ---> S4
                @CHECK: IF X(27) = 2 [@TWO, @CHECK]
                    @TWO: ---> S6
                    @CHECK: IF X(27) = 3 [@THREE, @ZERO]
                        @THREE: ---> S8
                        @ZERO: ---> S2
            @UPPER: IF X(27) = 4 [@FOUR, @CHECK]
                @FOUR: ---> S10
                @CHECK: IF X(27) = 5 [@FIVE, @SIX]
                    @FIVE: ---> S12
                    @SIX: ---> S14
        @ACCEPT: SET X(24) = T, T = X(23), F(T) = F(T) + U(Y), T = X(24);
        ADD X(25);
        IF X(27) < 3.5 [@LOWER, @UPPER]
            @LOWER: IF X(27) = 1 [@ONE, @CHECK]
                @ONE: ---> S4
                @CHECK: IF X(27) = 2 [@TWO, @CHECK]
                    @TWO: ---> S6
                    @CHECK: IF X(27) = 3 [@THREE, @ZERO]
                        @THREE: ---> S8
                        @ZERO: ---> S2
            @UPPER: IF X(27) = 4 [@FOUR, @CHECK]
                @FOUR: ---> S10
                @CHECK: IF X(27) = 5 [@FIVE, @SIX]
                    @FIVE: ---> S12
                    @SIX: ---> S14

    #Z^Shutdown: SET Y = X(25); IF U(Y) < 0.01 [@GIVENOMINAL, @ACCEPT]
        @GIVENOMINAL: SET U(Y) = U(Y) + 0.001, A(10) = A(10) + 0.001;
        SET A(12) = A(12) + 0.001; ADD X(25);
        SET X(24) = T, T = X(23), F(T) = F(T) + 0.001, T = X(24) ---> S16
        @ACCEPT: SET X(24) = T, T = X(23), F(T) = F(T) + U(Y), T = X(24);
        ADD X(25) ---> S16

S8,    \State 8 counts port entries during the CS Period [X(27) = 3]
    #R^DisPortEntry: ADD A(1), A(4), H(T); SET Y = X(25), S(Y) = X(1), U(Y) = 0;
    SET S(Y+1) = -987.987, U(Y+1) = -987.987, X(23) = T;
    SHOW 6, Total Port Entries, A(1);
    SHOW 9, CS Port Entries, A(4);
    IF J(T) < 0 [@LATENCY, @NULL]
        @LATENCY: SET J(T) = X(3); ADD A(19);
        SET A(21) = A(21) + X(3) ---> S9
        @NULL: ---> S9

    #Z^StartPostCS: IF Z(8) > 0.9 [@PAIRED, @UNPAIRED]
        @PAIRED: IF J(T) < 0 [@NORESPONSE, @ACCEPT]
            @NORESPONSE: SET A(21) = A(21) + Z(5)---> S12
            @ACCEPT: ---> S12
        @UNPAIRED: IF J(T) < 0 [@NORESPONSE, @ACCEPT]
            @NORESPONSE: SET A(21) = A(21) + Z(5) ---> S14
            @ACCEPT: ---> S14

    #Z^Shutdown: ---> S16

S9,    \State 9 counts port entry duration during the CS Period [X(27) = 3]
    #R^ConPortEntry: SET A(10) = A(10) + 0.01, A(13) = A(13) + 0.01;
    SET Y = X(25), U(Y) = U(Y) + 0.01 ---> SX

    0.01": SET Y = X(25); IF U(Y) < 0.01 [@GIVENOMINAL, @ACCEPT]
        @GIVENOMINAL: SET U(Y) = U(Y) + 0.001, A(10) = A(10) + 0.001;
        SET A(13) = A(13) + 0.001; ADD X(25);
        SET X(24) = T, T = X(23), I(T) = I(T) + 0.001, T = X(24);
        IF X(27) < 3.5 [@LOWER, @UPPER]
            @LOWER: IF X(27) = 1 [@ONE, @CHECK]
                @ONE: ---> S4
                @CHECK: IF X(27) = 2 [@TWO, @CHECK]
                    @TWO: ---> S6
                    @CHECK: IF X(27) = 3 [@THREE, @ZERO]
                        @THREE: ---> S8
                        @ZERO: ---> S2
            @UPPER: IF X(27) = 4 [@FOUR, @CHECK]
                @FOUR: ---> S10
                @CHECK: IF X(27) = 5 [@FIVE, @SIX]
                    @FIVE: ---> S12
                    @SIX: ---> S14
        @ACCEPT: SET X(24) = T, T = X(23), I(T) = I(T) + U(Y), T = X(24);
        ADD X(25);
        IF X(27) < 3.5 [@LOWER, @UPPER]
            @LOWER: IF X(27) = 1 [@ONE, @CHECK]
                @ONE: ---> S4
                @CHECK: IF X(27) = 2 [@TWO, @CHECK]
                    @TWO: ---> S6
                    @CHECK: IF X(27) = 3 [@THREE, @ZERO]
                        @THREE: ---> S8
                        @ZERO: ---> S2
            @UPPER: IF X(27) = 4 [@FOUR, @CHECK]
                @FOUR: ---> S10
                @CHECK: IF X(27) = 5 [@FIVE, @SIX]
                    @FIVE: ---> S12
                    @SIX: ---> S14

    #Z^Shutdown: SET Y = X(25); IF U(Y) < 0.01 [@GIVENOMINAL, @ACCEPT]
        @GIVENOMINAL: SET U(Y) = U(Y) + 0.001, A(10) = A(10) + 0.001;
        SET A(13) = A(13) + 0.001; ADD X(25);
        SET X(24) = T, T = X(23), I(T) = I(T) + 0.001, T = X(24) ---> S16
        @ACCEPT: SET X(24) = T, T = X(23), I(T) = I(T) + U(Y), T = X(24);
        ADD X(25) ---> S16

S10,    \State 10 counts port entries during an unpaired US [X(27) = 4]
    #R^DisPortEntry: ADD A(1), A(2), A(7), B(T), P(T);
    SET Y = X(25), S(Y) = X(1), U(Y) = 0, X(23) = T;
    SET S(Y+1) = -987.987, U(Y+1) = -987.987;
    SHOW 6, Total Port Entries, A(1);
    SHOW 7, ITI Port Entries, A(2);
    IF D(T) < 0 [@LATENCY, @NULL]
        @LATENCY: SET D(T) = X(2);
        IF R(T) < 0 [@USLATENCY, @NULL]
            @USLATENCY: SET R(T) = X(1) - X(10) ---> S11
            @NULL: ---> S11
        @NULL: IF R(T) < 0 [@USLATENCY, @NULL]
            @USLATENCY: SET R(T) = X(1) - X(10) ---> S11
            @NULL: ---> S11

    #Z^USComplete: ---> S4
    #Z^Shutdown: ---> S16

S11,    \State 11 counts port entry durations during an unpaired US [X(27) = 4]
    #R^ConPortEntry: SET A(10) = A(10) + 0.01, A(11) = A(11) + 0.01;
    SET A(15) = A(15) + 0.01, Y = X(25), U(Y) = U(Y) + 0.01 ---> SX

    0.01": SET Y = X(25); IF U(Y) < 0.01 [@GIVENOMINAL, @ACCEPT]
        @GIVENOMINAL: SET U(Y) = U(Y) + 0.001, A(10) = A(10) + 0.001;
        SET A(11) = A(11) + 0.001, A(15) = A(15) + 0.001; ADD X(25);
        SET X(24) = T, T = X(23), C(T) = C(T) + 0.001;
        SET Q(T) = Q(T) + 0.001, T = X(24);
        IF X(27) < 3.5 [@LOWER, @UPPER]
            @LOWER: IF X(27) = 1 [@ONE, @CHECK]
                @ONE: ---> S4
                @CHECK: IF X(27) = 2 [@TWO, @CHECK]
                    @TWO: ---> S6
                    @CHECK: IF X(27) = 3 [@THREE, @ZERO]
                        @THREE: ---> S8
                        @ZERO: ---> S2
            @UPPER: IF X(27) = 4 [@FOUR, @CHECK]
                @FOUR: ---> S10
                @CHECK: IF X(27) = 5 [@FIVE, @SIX]
                    @FIVE: ---> S12
                    @SIX: ---> S14
        @ACCEPT: SET X(24) = T, T = X(23), C(T) = C(T) + U(Y);
        SET Q(T) = Q(T) + U(Y), T = X(24); ADD X(25);
        IF X(27) < 3.5 [@LOWER, @UPPER]
            @LOWER: IF X(27) = 1 [@ONE, @CHECK]
                @ONE: ---> S4
                @CHECK: IF X(27) = 2 [@TWO, @CHECK]
                    @TWO: ---> S6
                    @CHECK: IF X(27) = 3 [@THREE, @ZERO]
                        @THREE: ---> S8
                        @ZERO: ---> S2
            @UPPER: IF X(27) = 4 [@FOUR, @CHECK]
                @FOUR: ---> S10
                @CHECK: IF X(27) = 5 [@FIVE, @SIX]
                    @FIVE: ---> S12
                    @SIX: ---> S14

    #Z^Shutdown: SET Y = X(25); IF U(Y) < 0.01 [@GIVENOMINAL, @ACCEPT]
        @GIVENOMINAL: SET U(Y) = U(Y) + 0.001, A(10) = A(10) + 0.001;
        SET A(11) = A(11) + 0.001, A(15) = A(15) + 0.001; ADD X(25);
        SET X(24) = T, T = X(23), C(T) = C(T) + 0.001;
        SET Q(T) = Q(T) + 0.001, T = X(24) ---> S16
        @ACCEPT: SET X(24) = T, T = X(23), C(T) = C(T) + U(Y);
        SET Q(T) = Q(T) + U(Y), T = X(24); ADD X(25) ---> S16

S12,    \State 12 counts port entries during a paired US - US period during Post-CS [X(27) = 5]
    #R^DisPortEntry: ADD A(1), A(6), A(7), M(T), P(T);
    SET Y = X(25), S(Y) = X(1), U(Y) = 0, X(23) = T;
    SET S(Y+1) = -987.987, U(Y+1) = -987.987;
    SHOW 6, Total Port Entries, A(1);
    SHOW 10, Post-CS Port Entries, A(6);
    IF O(T) < 0 [@LATENCY, @NULL]
        @LATENCY: SET O(T) = X(2);
        IF R(T) < 0 [@USLATENCY, @NULL]
            @USLATENCY: SET R(T) = X(3) ---> S13
            @NULL: ---> S13
        @NULL: IF R(T) < 0 [@USLATENCY, @NULL]
            @USLATENCY: SET R(T) = X(3) ---> S13
            @NULL: ---> S13

    #Z^USComplete: ---> S14
    #Z^Shutdown: ---> S16

S13,    \State 13 counts port entry duration during a paired US [X(27) = 5]
    #R^ConPortEntry: SET A(10) = A(10) + 0.01, A(14) = A(14) + 0.01;
    SET A(15) = A(15) + 0.01, Y = X(25), U(Y) = U(Y) + 0.01 ---> SX

    0.01": SET Y = X(25); IF U(Y) < 0.01 [@GIVENOMINAL, @ACCEPT]
        @GIVENOMINAL: SET U(Y) = U(Y) + 0.001, A(10) = A(10) + 0.001;
        SET A(14) = A(14) + 0.001, A(15) = A(15) + 0.001; ADD X(25);
        SET X(24) = T, T = X(23), N(T) = N(T) + 0.001;
        SET Q(T) = Q(T) + 0.001, T = X(24);
        IF X(27) < 3.5 [@LOWER, @UPPER]
            @LOWER: IF X(27) = 1 [@ONE, @CHECK]
                @ONE: ---> S4
                @CHECK: IF X(27) = 2 [@TWO, @CHECK]
                    @TWO: ---> S6
                    @CHECK: IF X(27) = 3 [@THREE, @ZERO]
                        @THREE: ---> S8
                        @ZERO: ---> S2
            @UPPER: IF X(27) = 4 [@FOUR, @CHECK]
                @FOUR: ---> S10
                @CHECK: IF X(27) = 5 [@FIVE, @SIX]
                    @FIVE: ---> S12
                    @SIX: ---> S14
        @ACCEPT: SET X(24) = T, T = X(23), N(T) = N(T) + U(Y);
        SET Q(T) = Q(T) + U(Y), T = X(24); ADD X(25);
        IF X(27) < 3.5 [@LOWER, @UPPER]
            @LOWER: IF X(27) = 1 [@ONE, @CHECK]
                @ONE: ---> S4
                @CHECK: IF X(27) = 2 [@TWO, @CHECK]
                    @TWO: ---> S6
                    @CHECK: IF X(27) = 3 [@THREE, @ZERO]
                        @THREE: ---> S8
                        @ZERO: ---> S2
            @UPPER: IF X(27) = 4 [@FOUR, @CHECK]
                @FOUR: ---> S10
                @CHECK: IF X(27) = 5 [@FIVE, @SIX]
                    @FIVE: ---> S12
                    @SIX: ---> S14

    #Z^Shutdown: SET Y = X(25); IF U(Y) < 0.01 [@GIVENOMINAL, @ACCEPT]
        @GIVENOMINAL: SET U(Y) = U(Y) + 0.001, A(10) = A(10) + 0.001;
        SET A(14) = A(14) + 0.001, A(15) = A(15) + 0.001; ADD X(25);
        SET X(24) = T, T = X(23), N(T) = N(T) + 0.001;
        SET Q(T) = Q(T) + 0.001, T = X(24) ---> SX
        @ACCEPT: SET X(24) = T, T = X(23), N(T) = N(T) + U(Y);
        SET Q(T) = Q(T) + U(Y), T = X(24); ADD X(25) ---> SX

S14,    \State 14 counts Post-CS port entries in the absence of US [X(27) = 6]
    #R^DisPortEntry: ADD A(1), A(6), M(T);
    SET Y = X(25), S(Y) = X(1), U(Y) = 0, X(23) = T;
    SET S(Y+1) = -987.987, U(Y+1) = -987.987;
    SHOW 6, Total Port Entries, A(1);
    SHOW 10, Post-CS Port Entries, A(6);
    IF O(T) < 0 [@LATENCY, @NULL]
        @LATENCY: SET O(T) = X(2) ---> S15
        @NULL: ---> S15

    #Z^ITItime: ---> S4
    #Z^Shutdown: ---> S16

S15,    \State 15 counts Post-CS port entry duration in the absence of US
    #R^ConPortEntry: SET A(10) = A(10) + 0.01, A(14) = A(14) + 0.01;
    SET Y = X(25), U(Y) = U(Y) + 0.01 ---> SX

    0.01": SET Y = X(25); IF U(Y) < 0.01 [@GIVENOMINAL, @ACCEPT]
        @GIVENOMINAL: SET U(Y) = U(Y) + 0.001, A(10) = A(10) + 0.001;
        SET A(14) = A(14) + 0.001; ADD X(25);
        SET X(24) = T, T = X(23), N(T) = N(T) + 0.001;
        SET T = X(24);
        IF X(27) < 3.5 [@LOWER, @UPPER]
            @LOWER: IF X(27) = 1 [@ONE, @CHECK]
                @ONE: ---> S4
                @CHECK: IF X(27) = 2 [@TWO, @CHECK]
                    @TWO: ---> S6
                    @CHECK: IF X(27) = 3 [@THREE, @ZERO]
                        @THREE: ---> S8
                        @ZERO: ---> S2
            @UPPER: IF X(27) = 4 [@FOUR, @CHECK]
                @FOUR: ---> S10
                @CHECK: IF X(27) = 5 [@FIVE, @SIX]
                    @FIVE: ---> S12
                    @SIX: ---> S14
        @ACCEPT: SET X(24) = T, T = X(23), N(T) = N(T) + U(Y);
        SET T = X(24); ADD X(25);
        IF X(27) < 3.5 [@LOWER, @UPPER]
            @LOWER: IF X(27) = 1 [@ONE, @CHECK]
                @ONE: ---> S4
                @CHECK: IF X(27) = 2 [@TWO, @CHECK]
                    @TWO: ---> S6
                    @CHECK: IF X(27) = 3 [@THREE, @ZERO]
                        @THREE: ---> S8
                        @ZERO: ---> S2
            @UPPER: IF X(27) = 4 [@FOUR, @CHECK]
                @FOUR: ---> S10
                @CHECK: IF X(27) = 5 [@FIVE, @SIX]
                    @FIVE: ---> S12
                    @SIX: ---> S14

    #Z^Shutdown: SET Y = X(25); IF U(Y) < 0.01 [@GIVENOMINAL, @ACCEPT]
        @GIVENOMINAL: SET U(Y) = U(Y) + 0.001, A(10) = A(10) + 0.001;
        SET A(14) = A(14) + 0.001; ADD X(25);
        SET X(24) = T, T = X(23), N(T) = N(T) + 0.001;
        SET T = X(24) ---> S16
        @ACCEPT: SET X(24) = T, T = X(23), N(T) = N(T) + U(Y);
        SET T = X(24); ADD X(25) ---> S16

S16,    \State 16 is a holding state
    #START: ---> SX

\-------------------------------------------------------------------------
\State Set 5 - Pump Delivery

S.S.5,
S1,    \State 1 waits for the start command
    #START: SET X(28) = Z(6) * 1" ---> S2

S2,    \State 2 waits for the ^StartUS Z-Pulse
    #Z^StartUS: ---> S3

    #Z^Shutdown: ---> S4

S3,    \State 3 waits to switch off the US
    X(28)#T: OFF ^Pump, ^LightReceptacle; Z^USComplete ---> S2

    #Z^Shutdown: OFF ^Pump, ^LightReceptacle ---> S4

S4,    \State 4 is a holding state
    #START: ---> SX

\-------------------------------------------------------------------------
\State Set 6 - Lever Press Recording

S.S.6,
S1,    \State 1 waits for the START command
    #START: SHOW 5, Lever Presses, A(5) ---> S2

S2,    \State 2 waits for the ^StartCS Z-Pulse
    #Z^StartCS: ---> S3

S3,    \State 3 records the appropriate lever press
    #RZ(7): ADD A(5), K(T); SET Y = X(26), V(Y) = X(1);
    ADD Y, X(26); SET V(Y) = -987.987; SHOW 5, Lever Presses, A(5);
    IF L(T) < 0 [@LATENCY, @NULL]
        @LATENCY: SET L(T) = X(3); ADD A(17);
        SET A(22) = A(22) + X(3) ---> SX
        @NULL: ---> SX

    #Z^StartPostCS: IF L(T) < 0 [@NORESPONSE, @ACCEPT]
        @NORESPONSE: SET A(22) = A(22) + Z(5) ---> S2
        @ACCEPT: ---> S2
    #Z^Shutdown: IF L(T) < 0 [@NORESPONSE, @ACCEPT]
        @NORESPONSE: SET A(22) = A(22) + Z(5) ---> S4
        @ACCEPT: ---> S4

S4,    \State 4 is a holding state
    #START: ---> SX

\-------------------------------------------------------------------------
\State Set 7 - Housekeeping - Pre-Session Screen Updater, Memory Check, Unusual Response Check

S.S.7,
S1,    \State 1 will refresh the screen with selected control variables
    0.99": IF S.S.1 <= 6 [@DISPLAY, @HOLD]
        @DISPLAY: SHOW 3, Number of Trials, Z(2);
        SHOW 4, CS Duration, Z(5);
        SHOW 5, Pump Duration, Z(6);
        IF Z(8) = 1 [@PAIRED, @UNPAIRED]
            @PAIRED: SHOW 2, Paired Lever (1L 2R), Z(7) ---> S2
            @UNPAIRED: SHOW 2, Unpaired Lever (1L 2R), Z(7) ---> S2
        @HOLD: ---> S3

    #START: SHOW 16, Long PE Alert, A(27);
    SHOW 17, Short PE Alert, A(28), 18, High Frequency Alert, A(29);
    SET X(8) = SECSTODAY; SET X(9) = X(8) + Z(0) + Z(1) - (Z(12) * 60);

    SET X(10) = X(9) / 3600, X(11) = X(9) / 3600;
    SET X(29) = Y, Y = X(10);

    ~Y := Trunc(Y);~; SET X(10) = Y, Y = X(11);
    ~Y := Frac(Y);~; SET Y = Y * 60; ~Y := Round(Y);~;
    SET X(11) = Y, Y = X(29);
    SET X(9) = X(10) + (X(11) / 100);
    IF X(9) >= 24 [@TOMORROW, @TODAY]
        @TOMORROW: SET X(9) = X(9) - 24;
        SHOW 11, Come Back Tomorrow, X(9) ---> S3
        @TODAY: SHOW 11, Come Back At, X(9) ---> S3

S2,    \State 2 will check the memory variables
    #START: SHOW 16, Long PE Alert, A(27);
    SHOW 17, Short PE Alert, A(28), 18, High Frequency Alert, A(29);
    SET X(8) = SECSTODAY; SET X(9) = X(8) + Z(0) + Z(1) - (Z(12) * 60);

    SET X(10) = X(9) / 3600, X(11) = X(9) / 3600;
    SET X(29) = Y, Y = X(10);

    ~Y := Trunc(Y);~; SET X(10) = Y, Y = X(11);
    ~Y := Frac(Y);~; SET Y = Y * 60; ~Y := Round(Y);~;
    SET X(11) = Y, Y = X(29);
    SET X(9) = X(10) + (X(11) / 100);
    IF X(9) >= 24 [@TOMORROW, @TODAY]
        @TOMORROW: SET X(9) = X(9) - 24;
        SHOW 11, Come Back Tomorrow, X(9) ---> S3
        @TODAY: SHOW 11, Come Back At, X(9) ---> S3

    0.01": IF ((X(12) = Z(1)) AND (X(13) = Z(2))) AND ((X(14) = Z(3)) AND (X(15) = Z(4))) [@OK, @MISMATCH]
        @OK: ---> S1
        @MISMATCH: Z^MemMismatch ---> S1

S3,    \State 3 monitors port entries for unusual properties, specifically high frequency
    #R^DisPortEntry: IF A(0) + A(1) = 5 [@IRI, @ELIF]
        @IRI: SET X(16) = S(1) - S(0), X(17) = S(2) - S(1);
        SET X(18) = S(3) - S(2), X(19) = S(4) - S(3);
        SET X(20) = S(5) - S(4); ARITHMETICMEAN X(21) = X, 16, 20;
        IF X(21) < Z(11) [@SHORTIRI, @OK]
            @SHORTIRI: ADD A(29); SHOW 18, High Frequency Alert, A(29) ---> S4
            @OK: ---> S4
        @ELIF: IF A(0) + A(1) > 5 [@MOVINGAVERAGE, @NULL]
            @MOVINGAVERAGE: SET X(16) = X(17), X(17) = X(18), X(18) = X(19);
            SET X(19) = X(20), Y = X(25), X(20) = S(Y) - S(Y-1); ARITHMETICMEAN X(21) = X, 16, 20;
            IF X(21) < Z(11) [@SHORTIRI, @OK]
                @SHORTIRI: ADD A(29); SHOW 18, High Frequency Alert, A(29) ---> S4
                @OK: ---> S4
            @NULL: ---> S4

    #Z^Shutdown: ---> S5

S4,    \state 4 monitors port entries once their durations have been recorded
    #R^ConPortEntry: ---> SX

    0.01": IF U(Y) > Z(9) [@LONGPE, @NORMALPE]
        @LONGPE: ADD A(27); SHOW 16, Long PE Alert, A(27);
        IF A(0) + A(1) >= 5 [@AVERAGE, @NULL]
            @AVERAGE: ARITHMETICMEAN X(22) = U, Y-4, Y; IF X(22) < Z(10) [@SHORTPE, @NULL]
                @SHORTPE: ADD A(28); SHOW 17, Short PE Alert, A(17) ---> S3
                @NULL: ---> S3
            @NULL: ---> S3
        @NORMALPE: IF A(0) + A(1) >= 5 [@AVERAGE, @NULL]
            @AVERAGE: ARITHMETICMEAN X(22) = U, Y-4, Y; IF X(22) < Z(10) [@SHORTPE, @NULL]
                @SHORTPE: ADD A(28); SHOW 17, Short PE Alert, A(17) ---> S3
                @NULL: ---> S3
            @NULL: ---> S3

    #Z^Shutdown: IF U(Y) > Z(9) [@LONGPE, @NORMALPE]
        @LONGPE: ADD A(27); SHOW 16, Long PE Alert, A(27);
        IF A(0) + A(1) >= 5 [@AVERAGE, @NULL]
            @AVERAGE: ARITHMETICMEAN X(22) = U, Y-4, Y; IF X(22) < Z(10) [@SHORTPE, @NULL]
                @SHORTPE: ADD A(28); SHOW 17, Short PE Alert, A(17) ---> S5
                @NULL: ---> S5
            @NULL: ---> S5
        @NORMALPE: IF A(0) + A(1) >= 5 [@AVERAGE, @NULL]
            @AVERAGE: ARITHMETICMEAN X(22) = U, Y-4, Y; IF X(22) < Z(10) [@SHORTPE, @NULL]
                @SHORTPE: ADD A(28); SHOW 17, Short PE Alert, A(17) ---> S5
                @NULL: ---> S5
            @NULL: ---> S5

S5,    \State 5 is a holding state
    #START: ---> SX

\-------------------------------------------------------------------------
\RELEASE NOTES: Version 1.01
\-------------------------------------------------------------------------
\
\ Autoshaping Single Lever v 1.01
\
\ This autoshaping (sign-tracking/goal-tracking) program will operate a single
\ lever as a stimulus that may or may not predict the delivery of a liquid
\ reinforcer. Supports delivery of up to 30 trials. Sessions are run independently
\ in each box.
\
\ Notes:
\ - After the issuance of the #START command, the program start time will be recorded.
\   A delay period will then begin until the conditioning session begins (indicated by the houselight).
\
\ - Inter-trial intervals (ITIs) can have three values - a mean value that can be varied by a fixed amount.
\   Thus ITIs will have values of X, X + Y, and X - Y.
\
\ - ITIs will be generated according to the number of trials, mean value and amount to vary by.
\   Their order of delivery is recorded in the W array.
\
\ - ITIs are used for both the beginning and end of the session (not just strictly intervals that are
\   between trials). For each session, the number of ITIs will be the number of trials + 1.
\
\ - 'Trials' in this program include a Pre-CS, CS and Post-CS periods or epochs. Thus the interval between
\   cues is ITI + 2 * CS duration. The experimenter may wish to clarify this in any report
\   or report the ITI as the ITI in this program + 2 * CS duration.
\
\ - The total duration of a port entry belongs to the epoch in which it began. Thus a port entry that
\   continues beyond the end of the CS is counted entirely as a CS port entry.
\
\ - In the unpaired condition, the pump onset is halfway through the ITI.
\
\ - Session parameters can be modified in any way the user finds most convenient or comfortable:
\   - By manually altering named variables once the program has loaded,
\   - By using a macro to laod the program and set variables, or
\   - By altering session control constants in a new version of the program.
\
\ - The MIT License below gives you permission to alter or improve this program
\   allowing you to adjust the program or fix any bugs you find. However, it would be
\   appreciated if bugs could be reported so that they can be fixed in the master tree
\   on Github. For contact details, please see:
\   http://orcid.org/0000-0002-0972-3788
\   or visit:
\   https://github.com/SKhoo
\
\-------------------------------------------------------------------------
\CHANGELOG
\
\ Version 1.20
\ - Added calculations for Probability Difference, Latency Score and PCA Score.
\
\ Version 1.05
\
\ - Added a RANDD runout function to S.S.1 (S.S.1, S5)
\ - This change will prevent inconsistencies in the ITIs selected when
\   you increase the number of trials. The issue arose because RANDD
\   was selecting part of the W array, but when new ITIs were generated
\   nothing was resetting the space that was available to RANDD.
\   Consequently, RANDD was selecting from the expanded set of numbers
\   and then part way through all of the elements in W were replaced
\   allowing for inconsistency in the ITIs selected.
\   By ensuring that RANDD has been run for each element in W after each
\   ITI generation, the full space of the W array is available for ITI
\   selection.
\
\-------------------------------------------------------------------------
\ MIT License
\
\ Copyright (c) 2017 Shaun Khoo
\
\ Permission is hereby granted, free of charge, to any person obtaining a copy
\ of this software and associated documentation files (the "Software"), to deal
\ in the Software without restriction, including without limitation the rights
\ to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
\ copies of the Software, and to permit persons to whom the Software is
\ furnished to do so, subject to the following conditions:
\
\ The above copyright notice and this permission notice shall be included in all
\ copies or substantial portions of the Software.
\
\ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
\ IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
\ FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
\ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
\ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
\ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
\ SOFTWARE.
\-------------------------------------------------------------------------
